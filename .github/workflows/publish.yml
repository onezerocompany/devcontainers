name: Build, Publish and Test

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *" # Run every day at 3am
  push:
    branches:
      - main

jobs:
  # Base images that don't depend on other internal images
  base-images:
    name: Build and Publish ${{ matrix.image.name }} Image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: dev:base
            context: ./images/dev:base
            tag: dev-base
            tag-aliases: base
          - name: settings-gen
            context: ./images/settings-gen
            tag: settings-gen

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          platforms: linux/amd64,linux/arm64
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:buildcache
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:buildcache,mode=max
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:latest
            ${{ matrix.image.name == 'dev:base' && format('ghcr.io/{0}/devcontainers/dev:latest', github.repository_owner) || '' }}
            ${{ matrix.image.name == 'dev:base' && format('ghcr.io/{0}/dev:base', github.repository_owner) || '' }}
            ${{ matrix.image.name == 'dev:base' && format('ghcr.io/{0}/dev-base', github.repository_owner) || '' }}
            ${{ matrix.image.name == 'dev:base' && format('ghcr.io/{0}/base', github.repository_owner) || '' }}
            ${{ matrix.image.tag-aliases && format('ghcr.io/{0}/{1}:latest', github.repository_owner, matrix.image.tag-aliases) || '' }}
          push: true

  # Layer 2: Images that depend on dev:base
  layer2-images:
    name: Build and Publish ${{ matrix.image.name }} Image
    runs-on: ubuntu-latest
    needs: [base-images]
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: dev:dind
            context: ./images/dev:dind
            tag: dev
            tag-suffix: dind
          - name: devcontainer:base
            context: ./images/devcontainer:base
            tag: devcontainer
            tag-suffix: base
          - name: runner
            context: ./images/runner
            tag: runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          platforms: linux/amd64,linux/arm64
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix || 'latest' }}-buildcache
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix || 'latest' }}-buildcache,mode=max
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix || 'latest' }}
            ${{ matrix.image.name == 'dev:dind' && format('ghcr.io/{0}/dev:dind', github.repository_owner) || '' }}
            ${{ matrix.image.name == 'dev:dind' && format('ghcr.io/{0}/base:docker', github.repository_owner) || '' }}
            ${{ matrix.image.name == 'devcontainer:base' && format('ghcr.io/{0}/base', github.repository_owner) || '' }}
          push: true

  # Layer 3: Images that depend on dev:dind
  layer3-images:
    name: Build and Publish ${{ matrix.image.name }} Image
    runs-on: ubuntu-latest
    needs: [layer2-images]
    strategy:
      matrix:
        image:
          - name: devcontainer:dind
            context: ./images/devcontainer:dind
            tag: devcontainer
            tag-suffix: dind

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image.context }}
          platforms: linux/amd64,linux/arm64
          cache-to: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix }}-buildcache
          cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix }}-buildcache,mode=max
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.image.tag }}:${{ matrix.image.tag-suffix }}
          push: true

  features:
    name: Build and Publish Features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Publish Features"
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./features/src"
          disable-repo-tagging: "true"
          features-namespace: "onezerocompany/devcontainers/features"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  devcontainers:
    name: Publish Pre-built Devcontainers
    runs-on: ubuntu-latest
    needs: [layer2-images, layer3-images, features]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Publish Devcontainers"
        uses: devcontainers/action@v1
        with:
          publish-templates: "true"
          base-path-to-templates: "./devcontainers"
          disable-repo-tagging: "true"
          templates-namespace: "onezerocompany/devcontainers"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Test jobs that run after publishing
  test-devcontainer-startup:
    name: Test Devcontainer Startup
    runs-on: ubuntu-latest
    needs: [devcontainers]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install devcontainer CLI
        run: npm install -g @devcontainers/cli

      - name: Build and test main devcontainer
        run: |
          echo "Testing main devcontainer at .devcontainer/devcontainer.json"
          # Wait for registry to fully propagate the updated features
          echo "Waiting 30 seconds for registry propagation..."
          sleep 30
          
          # Test with actual devcontainer.json
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . bash -c "echo 'Container started successfully'"
          devcontainer exec --workspace-folder . bash -c "whoami && pwd"
          devcontainer exec --workspace-folder . bash -c "mise --version"

  test-mise-install:
    name: Test Mise Installation Script
    runs-on: ubuntu-latest
    needs: [features]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test mise install script directly
        run: |
          # Create a test container
          docker run -d --name mise-test \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --user root \
            mcr.microsoft.com/devcontainers/base:ubuntu \
            sleep infinity
          
          # Install dependencies
          docker exec mise-test bash -c "apt-get update && apt-get install -y curl zsh sudo"
          
          # Create test user
          docker exec mise-test bash -c "useradd -m -s /usr/bin/zsh testuser && echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          
          # Run the mise install script
          docker exec mise-test bash -c "cd features/src/mise && USER=testuser INSTALL=true VERSION=latest ./install.sh"
          
          # Test mise is installed
          docker exec mise-test su testuser -c "source ~/.zshrc && mise --version"
          
          # Test mise doctor
          docker exec mise-test su testuser -c "source ~/.zshrc && mise doctor"
          
          # Cleanup
          docker stop mise-test && docker rm mise-test

  test-mise-with-config:
    name: Test Mise with Config File
    runs-on: ubuntu-latest
    needs: [features]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test mise with project config
        run: |
          # Create a test container
          docker run -d --name mise-config-test \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --user root \
            mcr.microsoft.com/devcontainers/base:ubuntu \
            sleep infinity
          
          # Install dependencies
          docker exec mise-config-test bash -c "apt-get update && apt-get install -y curl zsh sudo git"
          
          # Create test user
          docker exec mise-config-test bash -c "useradd -m -s /usr/bin/zsh testuser && echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          
          # Run the mise install script with auto-trust
          docker exec mise-config-test bash -c "cd features/src/mise && USER=testuser INSTALL=true VERSION=latest AUTO_TRUST_WORKSPACE=true TRUSTED_PATHS=/workspace ./install.sh"
          
          # Copy mise.toml to workspace
          docker exec mise-config-test su testuser -c "cp /workspace/mise.toml /tmp/mise.toml"
          
          # Test mise can install tools
          docker exec mise-config-test su testuser -c "cd /tmp && source ~/.zshrc && mise install"
          
          # Verify github-cli was installed
          docker exec mise-config-test su testuser -c "cd /tmp && source ~/.zshrc && mise list"
          
          # Test auto-trust is working
          docker exec mise-config-test su testuser -c "source ~/.zshrc && echo \$MISE_TRUSTED_CONFIG_PATHS | grep -q '/workspace'"
          
          # Cleanup
          docker stop mise-config-test && docker rm mise-config-test
