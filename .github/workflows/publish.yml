name: Publish Dev Containers

on:
  push:
    branches:
      - main
    paths:
      - "features/**"
      - "templates/**"
      - "images/**"
      - ".github/workflows/publish.yml"

jobs:
  # Publish all features
  publish-features:
    name: Publish All Features
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Features
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./features/src"
          generate-docs: "true"
          disable-repo-tagging: true
          oci-registry: ghcr.io
          features-namespace: onezerocompany/features
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Test all features and scenarios
  test-features:
    name: Test ${{ matrix.feature }} - ${{ matrix.scenario }}
    runs-on: ubuntu-latest
    needs: [publish-features]
    strategy:
      fail-fast: false
      matrix:
        include:
          # claude-code feature tests
          - feature: claude-code
            scenario: default
          - feature: claude-code
            scenario: custom-config-dir
          - feature: claude-code
            scenario: custom-versions
          - feature: claude-code
            scenario: install-locally
          - feature: claude-code
            scenario: specific-version
          - feature: claude-code
            scenario: with-modern-shell
          
          # mise-en-place feature tests
          - feature: mise-en-place
            scenario: default
          - feature: mise-en-place
            scenario: auto-trust-disabled
          - feature: mise-en-place
            scenario: cache-disabled
          - feature: mise-en-place
            scenario: deprecated-bun-option
          - feature: mise-en-place
            scenario: specific-version
          
          # modern-shell feature tests
          - feature: modern-shell
            scenario: default
          - feature: modern-shell
            scenario: all-enabled
          - feature: modern-shell
            scenario: all-disabled
          - feature: modern-shell
            scenario: completions-disabled
          - feature: modern-shell
            scenario: neovim-disabled
          - feature: modern-shell
            scenario: zsh-plugins-full
          - feature: modern-shell
            scenario: zsh-plugins-minimal
          - feature: modern-shell
            scenario: zsh-plugins-none
          
          # onezero-motd feature tests
          - feature: onezero-motd
            scenario: default
          - feature: onezero-motd
            scenario: custom-logo
          - feature: onezero-motd
            scenario: disabled
          - feature: onezero-motd
            scenario: edge-cases
          - feature: onezero-motd
            scenario: smoke-test
          
          # sandbox feature tests
          - feature: sandbox
            scenario: default
          - feature: sandbox
            scenario: allow-policy
          - feature: sandbox
            scenario: claude-disabled
          - feature: sandbox
            scenario: claude-integration
          - feature: sandbox
            scenario: custom-domains
          - feature: sandbox
            scenario: docker-enabled
          - feature: sandbox
            scenario: logging-disabled
          - feature: sandbox
            scenario: network-blocking
          - feature: sandbox
            scenario: strict-mode
          - feature: sandbox
            scenario: wildcard-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install devcontainer CLI
        run: npm install -g @devcontainers/cli
      
      - name: Run test for ${{ matrix.feature }} - ${{ matrix.scenario }}
        run: |
          cd features
          devcontainer features test \
            --features ${{ matrix.feature }} \
            --skip-autogenerated \
            --filter ${{ matrix.scenario }}

  # Build base Docker image
  publish-base:
    name: Build and Push base Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/base
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and Push base
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/base:buildcache
            type=registry,ref=ghcr.io/onezerocompany/base:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/base:buildcache,mode=max

  # Build runner Docker image
  publish-runner:
    name: Build and Push runner Docker Image
    runs-on: ubuntu-latest
    needs: [publish-base]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/runner
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and Push runner
        uses: docker/build-push-action@v5
        with:
          context: ./images/runner
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/runner:buildcache
            type=registry,ref=ghcr.io/onezerocompany/runner:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/runner:buildcache,mode=max

  # Build settings-gen Docker image
  publish-settings-gen:
    name: Build and Push settings-gen Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/settings-gen
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and Push settings-gen
        uses: docker/build-push-action@v5
        with:
          context: ./images/settings-gen
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/settings-gen:buildcache
            type=registry,ref=ghcr.io/onezerocompany/settings-gen:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/settings-gen:buildcache,mode=max

  # Pre-build template images
  prebuild-templates:
    name: Pre-build ${{ matrix.template }} Template
    runs-on: ubuntu-latest
    needs: [publish-base, publish-features]
    strategy:
      fail-fast: false
      matrix:
        template:
          - base
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pre-build devcontainer
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/onezerocompany/devcontainer-${{ matrix.template }}
          cacheFrom: ghcr.io/onezerocompany/devcontainer-${{ matrix.template }}
          push: always
          platform: linux/amd64,linux/arm64
          configFile: ./templates/${{ matrix.template }}/image/devcontainer.json

  # Publish all templates
  publish-templates:
    name: Publish All Templates
    runs-on: ubuntu-latest
    needs: [publish-features, prebuild-templates]
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish All Templates
        uses: devcontainers/action@v1
        with:
          publish-templates: "true"
          base-path-to-templates: "./templates"
          generate-docs: "true"
          disable-repo-tagging: true
          oci-registry: ghcr.io
          templates-namespace: onezerocompany/templates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}