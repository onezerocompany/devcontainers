name: Build and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 3 * * *" # Daily at 3am
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/devcontainer

jobs:
  # Build the base image
  build-base:
    name: Build Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          file: ./images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-base
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-base,mode=max
          target: standard

  # Build the dind image
  build-dind:
    name: Build Docker-in-Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dind image
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          file: ./images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dind
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dind
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-dind,mode=max
          target: dind

  # Build the devcontainer standard image
  build-devcontainer-standard:
    name: Build DevContainer Standard Image
    needs: build-base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push devcontainer standard image
        uses: docker/build-push-action@v5
        with:
          context: ./images/devcontainer
          file: ./images/devcontainer/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-devcontainer-standard
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-devcontainer-standard,mode=max
          build-args: |
            BASE_IMAGE_REGISTRY=${{ env.REGISTRY }}
            BASE_IMAGE_NAME=${{ github.repository_owner }}/devcontainer
            BASE_IMAGE_TAG=base
            DIND=false

  # Build the devcontainer dind image
  build-devcontainer-dind:
    name: Build DevContainer DIND Image
    needs: build-dind
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push devcontainer dind image
        uses: docker/build-push-action@v5
        with:
          context: ./images/devcontainer
          file: ./images/devcontainer/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dind
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-devcontainer-dind
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-devcontainer-dind,mode=max
          build-args: |
            BASE_IMAGE_REGISTRY=${{ env.REGISTRY }}
            BASE_IMAGE_NAME=${{ github.repository_owner }}/devcontainer
            BASE_IMAGE_TAG=dind
            DIND=true

  # Test all devcontainer functionality
  test-devcontainer:
    name: Test DevContainer
    needs: [build-devcontainer-standard, build-devcontainer-dind]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: base
            test-type: startup
          - variant: dind
            test-type: startup
          - variant: base
            test-type: mise-tools
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test devcontainer startup
        if: matrix.test-type == 'startup'
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}"

          echo "Testing startup of $IMAGE_TAG"

          # Run the container and check if it starts successfully
          docker run --rm -d --name test-container $IMAGE_TAG

          # Wait for container to be fully started
          sleep 5

          # Check if container is still running
          docker ps | grep test-container

          # Execute a simple command to verify the shell works
          docker exec test-container zsh -l -c "echo 'Container started successfully'"

          # Check if mise is available
          docker exec test-container zsh -l -c "which mise"

          # Check if other expected tools are available - ensure mise is activated
          docker exec test-container zsh -l -c 'eval "$($HOME/.local/bin/mise activate zsh --shims)" && which starship'
          docker exec test-container zsh -l -c 'eval "$($HOME/.local/bin/mise activate zsh --shims)" && which eza'
          docker exec test-container zsh -l -c 'eval "$($HOME/.local/bin/mise activate zsh --shims)" && which bat'
          docker exec test-container zsh -l -c 'eval "$($HOME/.local/bin/mise activate zsh --shims)" && which zoxide'

          # Clean up
          docker stop test-container

      - name: Test mise tool installation
        if: matrix.test-type == 'mise-tools'
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}"

          echo "Testing mise tool installation in $IMAGE_TAG"

          # Create a test mise configuration
          cat > test-mise.toml << 'EOF'
          [tools]
          node = "20"
          python = "3.11"
          EOF

          # Run container with the test configuration
          docker run --rm -d --name test-mise \
            -v $(pwd)/test-mise.toml:/workspace/.mise.toml \
            -w /workspace \
            $IMAGE_TAG

          # Wait for container to start
          sleep 5

          # Install tools using mise
          docker exec test-mise zsh -l -c "cd /workspace && mise install"

          # Verify tools are installed
          docker exec test-mise zsh -l -c "cd /workspace && mise ls"

          # Test that tools are available - ensure mise is activated
          docker exec test-mise zsh -l -c 'cd /workspace && eval "$($HOME/.local/bin/mise activate zsh --shims)" && node --version'
          docker exec test-mise zsh -l -c 'cd /workspace && eval "$($HOME/.local/bin/mise activate zsh --shims)" && python --version'

          # Clean up
          docker stop test-mise
          rm test-mise.toml
