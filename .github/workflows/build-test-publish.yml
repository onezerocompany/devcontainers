name: Build, Test and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 3 * * *" # Daily at 3am
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/devcontainer

jobs:
  # Build the base image
  build-base:
    name: Build Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          file: ./images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: standard

  # Build the dind image
  build-dind:
    name: Build Docker-in-Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dind image
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          file: ./images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dind
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: dind

  # Quick validation tests
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: [build-base, build-dind]
    strategy:
      matrix:
        image: [base, dind]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Container Starts
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} echo "Container works!"

      - name: Basic Tools Work
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} bash -c "
            git --version &&
            node --version &&
            npm --version &&
            mise --version
          "

  # Developer workflow tests
  developer-workflows:
    name: Developer Workflows
    runs-on: ubuntu-latest
    needs: quick-validation
    strategy:
      matrix:
        image: [base]
        workflow:
          - name: "Node.js Development"
            test: |
              # Create a simple Node.js project
              cat > package.json << 'EOF'
              {
                "name": "test-app",
                "version": "1.0.0",
                "scripts": {
                  "start": "node index.js",
                  "test": "node test.js"
                }
              }
              EOF
              
              echo 'console.log("Hello from DevContainer!");' > index.js
              echo 'console.log("Tests pass!"); process.exit(0);' > test.js
              
              # Developer workflow
              npm install
              npm test
              npm start

          - name: "Git Workflow"
            test: |
              git config --global user.email "test@example.com"
              git config --global user.name "Test User"
              git init
              echo "# Test Project" > README.md
              git add README.md
              git commit -m "Initial commit"
              git log --oneline

          - name: "Tool Management"
            test: |
              # Mise should manage tools
              mise list
              mise --version
              
              # Tools should be available
              node --version
              starship --version
              fzf --version

          - name: "File Permissions"
            test: |
              # Create files and check permissions
              touch test-file
              mkdir test-dir
              echo "content" > test-dir/file.txt
              
              # Should be able to modify files
              echo "modified" >> test-file
              rm -rf test-dir
              
              # Git should not see permission changes
              git init
              touch tracked-file
              git add tracked-file
              git status --porcelain | grep -q "^A" || exit 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ${{ matrix.workflow.name }}
        run: |
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.image }} \
            bash -c "${{ matrix.workflow.test }}"

  # Performance tests
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: Measure Startup Time
        run: |
          echo "Measuring container startup time..."
          
          # Pull image first to exclude download time
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Measure cold start
          START=$(date +%s%N)
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest echo "ready"
          END=$(date +%s%N)
          COLD_MS=$(( ($END - $START) / 1000000 ))
          echo "Cold start: ${COLD_MS}ms"
          
          # Measure warm start
          START=$(date +%s%N)
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest echo "ready"
          END=$(date +%s%N)
          WARM_MS=$(( ($END - $START) / 1000000 ))
          echo "Warm start: ${WARM_MS}ms"
          
          # Fail if too slow (5 seconds)
          if [ $COLD_MS -gt 5000 ]; then
            echo "❌ Cold start too slow (>5s)"
            exit 1
          fi
          
          echo "✅ Performance acceptable"

      - name: Command Responsiveness
        run: |
          echo "Testing command responsiveness..."
          
          # Time multiple git commands
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            bash -c "
              START=\$(date +%s%N)
              for i in {1..10}; do
                git --version > /dev/null
              done
              END=\$(date +%s%N)
              DURATION_MS=\$(( (\$END - \$START) / 1000000 ))
              echo \"10 git commands: \${DURATION_MS}ms\"
              
              # Should be under 2 seconds for 10 commands
              if [ \$DURATION_MS -gt 2000 ]; then
                echo '❌ Commands are slow'
                exit 1
              fi
              echo '✅ Commands are responsive'
            "

  # Real-world project test
  real-world-project:
    name: Real World Project Test
    runs-on: ubuntu-latest
    needs: developer-workflows
    steps:
      - name: Test with Express.js Project
        run: |
          # Create a real Express.js project structure
          mkdir -p test-project
          cd test-project
          
          cat > package.json << 'EOF'
          {
            "name": "express-test",
            "version": "1.0.0",
            "main": "app.js",
            "scripts": {
              "start": "node app.js",
              "test": "node test.js",
              "lint": "echo 'Linting...'"
            },
            "dependencies": {
              "express": "^4.18.0"
            }
          }
          EOF
          
          cat > app.js << 'EOF'
          const express = require('express');
          const app = express();
          const port = 3000;
          
          app.get('/', (req, res) => {
            res.send('Hello from DevContainer!');
          });
          
          if (require.main === module) {
            app.listen(port, () => {
              console.log(`App listening at http://localhost:${port}`);
            });
          }
          
          module.exports = app;
          EOF
          
          cat > test.js << 'EOF'
          const app = require('./app');
          console.log('Running tests...');
          console.log('✓ App module loads successfully');
          console.log('✓ Express app created');
          console.log('All tests passed!');
          process.exit(0);
          EOF
          
          # Run in devcontainer
          docker run --rm \
            -v $PWD:/workspace \
            -w /workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            bash -c "
              echo '=== Installing dependencies ===' &&
              npm install &&
              echo '=== Running tests ===' &&
              npm test &&
              echo '=== Running lint ===' &&
              npm run lint &&
              echo '=== Checking app can start ===' &&
              node -e 'require(\"./app.js\"); console.log(\"✓ App loads successfully\");' &&
              echo '=== All checks passed! ==='
            "

  # Docker-in-Docker specific tests
  docker-in-docker:
    name: Docker-in-Docker Workflows
    runs-on: ubuntu-latest
    needs: quick-validation
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Test Docker Development
        run: |
          # Create test Dockerfile
          mkdir -p docker-test
          cd docker-test
          
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY . .
          CMD ["node", "-e", "console.log('Hello from container!')"]
          EOF
          
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            app:
              build: .
              command: node -e "console.log('Compose works!')"
          EOF
          
          # Run tests
          docker run --rm \
            --privileged \
            -v $PWD:/workspace \
            -w /workspace \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dind \
            bash -c "
              echo '=== Docker version ===' &&
              docker --version &&
              echo '=== Docker Compose version ===' &&
              docker compose version &&
              echo '=== Building image ===' &&
              docker build -t test:latest . &&
              echo '=== Running container ===' &&
              docker run --rm test:latest &&
              echo '=== Testing compose ===' &&
              docker compose run --rm app &&
              echo '=== All Docker tests passed! ==='
            "

  # DevContainer CLI test
  test-devcontainer-startup:
    name: Test DevContainer Startup
    runs-on: ubuntu-latest
    needs: [build-base]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install DevContainer CLI
        run: npm install -g @devcontainers/cli

      - name: Test DevContainer Configuration
        run: |
          echo "Testing main devcontainer.json..."
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . echo "DevContainer is running!"
          devcontainer down --workspace-folder .

  # Summary job for branch protection
  tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: 
      - quick-validation
      - developer-workflows
      - performance-check
      - real-world-project
      - test-devcontainer-startup
    if: always()
    steps:
      - name: Check Results
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "❌ Some tests failed"
            exit 1
          fi
          echo "✅ All tests passed!"