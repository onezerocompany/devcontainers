name: Test Sandbox Security

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'images/devcontainer:base/**'
      - '.github/workflows/test-sandbox-security.yml'

jobs:
  test-sandbox-attack-vectors:
    name: Test Sandbox Attack Vectors
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test State File Tampering Protection
        run: |
          echo "Testing state file tampering protection..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=false \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Enable sandbox
              /usr/local/bin/devcontainer-entrypoint true
              
              echo "Attempting various tampering methods..."
              
              # Try to remove state file (Note: with sudo this IS possible, but state is checked on each run)
              if sudo rm -f /var/lib/devcontainer-sandbox/enabled 2>/dev/null; then
                echo "⚠️  Could remove state file with sudo (expected - we need sudo for init)"
                # But the protection is that it gets recreated on next run
                OUTPUT=$(/usr/local/bin/devcontainer-entrypoint echo "test" 2>&1)
                if echo "$OUTPUT" | grep -q "Sandbox mode is disabled"; then
                  echo "✓ Sandbox properly disabled after state file removal"
                else
                  echo "✗ Unexpected behavior after state file removal"
                  exit 1
                fi
              else
                echo "✓ Cannot remove state file even with sudo"
              fi
              
              # Try to modify permissions
              if sudo chmod 666 /var/lib/devcontainer-sandbox/enabled 2>/dev/null; then
                echo "⚠️  Could change state file permissions with sudo (expected)"
              else
                echo "✓ Cannot change state file permissions"
              fi
              
              # Try to replace the entrypoint (should fail - owned by root)
              if echo "#!/bin/bash" > /usr/local/bin/devcontainer-entrypoint 2>/dev/null; then
                echo "✗ SECURITY ISSUE: Could replace entrypoint!"
                exit 1
              else
                echo "✓ Cannot replace entrypoint wrapper (owned by root)"
              fi
              
              # Try to modify sudoers
              if sudo echo "zero ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/sandbox 2>/dev/null; then
                echo "⚠️  Could modify sudoers with sudo (expected - sudoers requires root)"
              else
                echo "✓ Cannot modify sudoers without sudo"
              fi
            '

      - name: Test Environment Variable Injection
        run: |
          echo "Testing environment variable injection attacks..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=true \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Enable sandbox
              /usr/local/bin/devcontainer-entrypoint true
              
              # Try various env var injections
              export DEVCONTAINER_SANDBOX_ENABLED="false; rm -rf /"
              export ADDITIONAL_ALLOWED_DOMAINS="evil.com; iptables -F"
              
              # Run entrypoint again - should not execute injected commands
              OUTPUT=$(/usr/local/bin/devcontainer-entrypoint echo "test" 2>&1)
              
              # Verify system is intact
              if [ -d /usr ]; then
                echo "✓ System intact after injection attempt"
              else
                echo "✗ SECURITY ISSUE: Injection was executed!"
                exit 1
              fi
              
              # Verify firewall still active
              if sudo iptables -L OUTPUT -n | grep -q "policy DROP" 2>/dev/null; then
                echo "✓ Firewall still active after injection"
              else
                echo "✗ Firewall was compromised"
                exit 1
              fi
            '

      - name: Test Process Manipulation
        run: |
          echo "Testing process manipulation attacks..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=true \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Enable sandbox
              /usr/local/bin/devcontainer-entrypoint true
              
              # Try to kill the entrypoint process (if it were persistent)
              pkill -f devcontainer-entrypoint 2>/dev/null || true
              
              # Try to bypass by running shell directly
              export DEVCONTAINER_SANDBOX_ENABLED=false
              
              # Should still be sandboxed
              OUTPUT=$(bash -c "/usr/local/bin/devcontainer-entrypoint echo test" 2>&1)
              if echo "$OUTPUT" | grep -q "Sandbox mode is enabled (immutable)"; then
                echo "✓ Sandbox persists despite process manipulation"
              else
                echo "✗ Sandbox was bypassed"
                exit 1
              fi
            '

      - name: Test File System Attacks
        run: |
          echo "Testing file system manipulation..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=false \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Enable sandbox
              /usr/local/bin/devcontainer-entrypoint true
              
              # Try to create a fake state directory
              mkdir -p /tmp/fake-sandbox
              echo "false" > /tmp/fake-sandbox/enabled
              
              # Try to symlink attack
              if sudo ln -sf /tmp/fake-sandbox /var/lib/devcontainer-sandbox 2>/dev/null; then
                echo "✗ SECURITY ISSUE: Could create symlink!"
                exit 1
              else
                echo "✓ Cannot create symlink to state directory"
              fi
              
              # Try bind mount attack (would require additional privileges)
              if sudo mount --bind /tmp/fake-sandbox /var/lib/devcontainer-sandbox 2>/dev/null; then
                echo "✗ SECURITY ISSUE: Could bind mount!"
                exit 1
              else
                echo "✓ Cannot bind mount over state directory"
              fi
            '

  test-sandbox-edge-cases:
    name: Test Sandbox Edge Cases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Rapid Enable/Disable Cycles
        run: |
          echo "Testing rapid enable/disable cycles..."
          CONTAINER_ID=$(docker run -d \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=false \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            sleep infinity)
          
          # Rapidly try to change state
          for i in {1..10}; do
            if [ $((i % 2)) -eq 0 ]; then
              docker exec -e DEVCONTAINER_SANDBOX_ENABLED=false $CONTAINER_ID \
                /usr/local/bin/devcontainer-entrypoint echo "attempt $i" >/dev/null 2>&1
            else
              docker exec -e DEVCONTAINER_SANDBOX_ENABLED=true $CONTAINER_ID \
                /usr/local/bin/devcontainer-entrypoint echo "attempt $i" >/dev/null 2>&1
            fi
          done
          
          # Final check - should still be enabled
          OUTPUT=$(docker exec $CONTAINER_ID \
            /usr/local/bin/devcontainer-entrypoint echo "final" 2>&1)
          
          if echo "$OUTPUT" | grep -q "Sandbox mode is enabled (immutable)"; then
            echo "✓ Sandbox remains stable after rapid changes"
          else
            echo "✗ Sandbox state corrupted"
            echo "Output: $OUTPUT"
            docker stop $CONTAINER_ID >/dev/null
            exit 1
          fi
          
          docker stop $CONTAINER_ID >/dev/null
          docker rm $CONTAINER_ID >/dev/null

      - name: Test Concurrent Access
        run: |
          echo "Testing concurrent access to sandbox..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=false \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Launch multiple concurrent attempts
              for i in {1..5}; do
                (
                  export DEVCONTAINER_SANDBOX_ENABLED=false
                  /usr/local/bin/devcontainer-entrypoint echo "process $i" >/dev/null 2>&1
                ) &
              done
              
              # Wait for all background processes
              wait
              
              # Check final state
              OUTPUT=$(/usr/local/bin/devcontainer-entrypoint echo "final check" 2>&1)
              if echo "$OUTPUT" | grep -q "Sandbox mode is enabled (immutable)"; then
                echo "✓ Sandbox handles concurrent access correctly"
              else
                echo "✗ Concurrent access corrupted sandbox"
                exit 1
              fi
            '

      - name: Test Empty Environment Variables
        run: |
          echo "Testing empty and unset environment variables..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED="" \
            -e DEVCONTAINER_SANDBOX_FIREWALL="" \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Should treat empty as false
              /usr/local/bin/devcontainer-entrypoint true
              
              if [ -f /var/lib/devcontainer-sandbox/enabled ]; then
                echo "✗ Sandbox enabled with empty env var"
                exit 1
              else
                echo "✓ Empty env var treated as disabled"
              fi
            '

      - name: Test Special Characters in Domains
        run: |
          echo "Testing special characters in allowed domains..."
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=true \
            -e DEVCONTAINER=true \
            -e 'DEVCONTAINER_SANDBOX_ALLOWED_DOMAINS=test.com,my-api.io,sub.domain.net,192.168.1.1' \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            bash -c '
              # Initialize sandbox
              /usr/local/bin/devcontainer-entrypoint true
              
              # Check state was created properly
              if [ -f /var/lib/devcontainer-sandbox/domains ]; then
                DOMAINS=$(cat /var/lib/devcontainer-sandbox/domains)
                echo "✓ Domains saved: $DOMAINS"
                
                # Verify no command injection occurred
                if [ -d /usr ] && [ -d /bin ]; then
                  echo "✓ System intact with special domain characters"
                else
                  echo "✗ Special characters caused issues"
                  exit 1
                fi
              else
                echo "✗ Domains file not created"
                exit 1
              fi
            '

  test-performance:
    name: Test Performance Impact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Startup Performance
        run: |
          echo "Testing startup performance impact..."
          
          # Baseline without sandbox
          START=$(date +%s%N)
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=false \
            ghcr.io/onezerocompany/devcontainer:base \
            echo "test" >/dev/null 2>&1
          END=$(date +%s%N)
          BASELINE=$((($END - $START) / 1000000))
          echo "Baseline (no sandbox): ${BASELINE}ms"
          
          # With sandbox enabled
          START=$(date +%s%N)
          docker run --rm \
            -e DEVCONTAINER_SANDBOX_ENABLED=true \
            -e DEVCONTAINER_SANDBOX_FIREWALL=false \
            -e DEVCONTAINER=true \
            --cap-add NET_ADMIN \
            ghcr.io/onezerocompany/devcontainer:base \
            echo "test" >/dev/null 2>&1
          END=$(date +%s%N)
          SANDBOX=$((($END - $START) / 1000000))
          echo "With sandbox: ${SANDBOX}ms"
          
          # Calculate overhead
          OVERHEAD=$(($SANDBOX - $BASELINE))
          echo "Overhead: ${OVERHEAD}ms"
          
          # Should be reasonable (less than 5 seconds)
          if [ $OVERHEAD -lt 5000 ]; then
            echo "✓ Sandbox overhead is acceptable"
          else
            echo "✗ Sandbox overhead too high"
            exit 1
          fi