name: Test Devcontainers

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-devcontainer-startup:
    name: Test Devcontainer Startup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install devcontainer CLI
        run: npm install -g @devcontainers/cli

      - name: Build and test main devcontainer
        run: |
          echo "Testing main devcontainer at .devcontainer/devcontainer.json"
          # First, pull the base image if it exists, or use a fallback
          if docker pull ghcr.io/onezerocompany/devcontainers/dev:latest 2>/dev/null; then
            echo "Using published dev image"
          else
            echo "Dev image not available, using fallback base image"
            # Create temporary devcontainer.json with base image
            mkdir -p .test-main
            cat > .test-main/devcontainer.json << EOF
          {
            "name": "devcontainers-test",
            "image": "mcr.microsoft.com/devcontainers/base:ubuntu"
          }
          EOF
            devcontainer up --workspace-folder . --config .test-main/devcontainer.json
            devcontainer exec --workspace-folder . --config .test-main/devcontainer.json bash -c "echo 'Container started successfully'"
            devcontainer exec --workspace-folder . --config .test-main/devcontainer.json bash -c "whoami && pwd"
            exit 0
          fi
          
          # Test with actual devcontainer.json
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . bash -c "echo 'Container started successfully'"
          devcontainer exec --workspace-folder . bash -c "whoami && pwd"

  test-mise-install:
    name: Test Mise Installation Script
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test mise install script directly
        run: |
          # Create a test container
          docker run -d --name mise-test \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --user root \
            mcr.microsoft.com/devcontainers/base:ubuntu \
            sleep infinity
          
          # Install dependencies
          docker exec mise-test bash -c "apt-get update && apt-get install -y curl zsh sudo"
          
          # Create test user
          docker exec mise-test bash -c "useradd -m -s /usr/bin/zsh testuser && echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          
          # Run the mise install script
          docker exec mise-test bash -c "cd features/src/mise && USER=testuser INSTALL=true VERSION=latest ./install.sh"
          
          # Test mise is installed
          docker exec mise-test su testuser -c "source ~/.zshrc && mise --version"
          
          # Test mise doctor
          docker exec mise-test su testuser -c "source ~/.zshrc && mise doctor"
          
          # Cleanup
          docker stop mise-test && docker rm mise-test

  test-mise-with-config:
    name: Test Mise with Config File
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test mise with project config
        run: |
          # Create a test container
          docker run -d --name mise-config-test \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --user root \
            mcr.microsoft.com/devcontainers/base:ubuntu \
            sleep infinity
          
          # Install dependencies
          docker exec mise-config-test bash -c "apt-get update && apt-get install -y curl zsh sudo git"
          
          # Create test user
          docker exec mise-config-test bash -c "useradd -m -s /usr/bin/zsh testuser && echo 'testuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
          
          # Run the mise install script with auto-trust
          docker exec mise-config-test bash -c "cd features/src/mise && USER=testuser INSTALL=true VERSION=latest AUTO_TRUST_WORKSPACE=true TRUSTED_PATHS=/workspace ./install.sh"
          
          # Copy mise.toml to workspace
          docker exec mise-config-test su testuser -c "cp /workspace/mise.toml /tmp/mise.toml"
          
          # Test mise can install tools
          docker exec mise-config-test su testuser -c "cd /tmp && source ~/.zshrc && mise install"
          
          # Verify github-cli was installed
          docker exec mise-config-test su testuser -c "cd /tmp && source ~/.zshrc && mise list"
          
          # Test auto-trust is working
          docker exec mise-config-test su testuser -c "source ~/.zshrc && echo \$MISE_TRUSTED_CONFIG_PATHS | grep -q '/workspace'"
          
          # Cleanup
          docker stop mise-config-test && docker rm mise-config-test

  test-integrated-scenario:
    name: Test Integrated Devcontainer Scenario
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install devcontainer CLI
        run: npm install -g @devcontainers/cli

      - name: Create and test integrated devcontainer
        run: |
          mkdir -p .test-integrated
          
          # Check if dev image is available, otherwise use base image
          if docker pull ghcr.io/onezerocompany/devcontainers/dev:latest 2>/dev/null; then
            IMAGE="ghcr.io/onezerocompany/devcontainers/dev"
          else
            IMAGE="mcr.microsoft.com/devcontainers/base:ubuntu"
          fi
          
          # Create devcontainer that installs mise manually
          cat > .test-integrated/devcontainer.json << 'EOF'
          {
            "name": "Integrated Test",
            "image": "__IMAGE__",
            "postCreateCommand": "bash -c 'cd /workspaces/*/features/src/mise && USER=$(whoami) INSTALL=true VERSION=latest AUTO_TRUST_WORKSPACE=true ./install.sh'"
          }
          EOF
          
          # Replace the IMAGE placeholder
          sed -i "s|__IMAGE__|$IMAGE|" .test-integrated/devcontainer.json
          
          # Build and start container
          devcontainer up --workspace-folder . --config .test-integrated/devcontainer.json
          
          # Test mise is available
          devcontainer exec --workspace-folder . --config .test-integrated/devcontainer.json \
            bash -c "export PATH=\$HOME/.local/bin:\$PATH && mise --version && mise doctor"
          
          # Copy mise config and test installation
          devcontainer exec --workspace-folder . --config .test-integrated/devcontainer.json \
            bash -c "cp mise.toml /tmp/ && cd /tmp && export PATH=\$HOME/.local/bin:\$PATH && mise install && mise list"