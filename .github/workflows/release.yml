name: Publish Release

on:
  release:
    types: [published]

jobs:
  # Extract version from release tag
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_major: ${{ steps.version.outputs.version_major }}
    steps:
      - name: Extract version from release tag
        id: version
        run: |
          # Extract version from release tag (e.g., v1.2.3 -> 1.2.3)
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          # Extract major version (e.g., 1.2.3 -> 1)
          VERSION_MAJOR=$(echo "${VERSION}" | cut -d. -f1)
          echo "version_major=${VERSION_MAJOR}" >> $GITHUB_OUTPUT

          echo "Release version: ${VERSION}"
          echo "Major version: ${VERSION_MAJOR}"

  # Publish all features
  publish-features:
    name: Publish All Features
    runs-on: ubuntu-latest
    needs: [extract-version]
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update feature versions
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Updating feature versions to ${VERSION}..."
          
          # Find and update all devcontainer-feature.json files
          find . -name "devcontainer-feature.json" -type f | while read -r file; do
            echo "Updating feature file: $file"
            jq --arg version "$VERSION" '.version = $version' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Features
        uses: devcontainers/action@v1
        with:
          publish-features: "true"
          base-path-to-features: "./features/src"
          generate-docs: "true"
          disable-repo-tagging: true
          oci-registry: ghcr.io
          features-namespace: onezerocompany/features
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish all templates
  publish-templates:
    name: Publish All Templates
    runs-on: ubuntu-latest
    needs: [extract-version, publish-features]
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update template versions and feature references
        run: |
          VERSION="${{ needs.extract-version.outputs.version }}"
          VERSION_MAJOR="${{ needs.extract-version.outputs.version_major }}"
          echo "Updating template versions to ${VERSION}..."
          
          # Find and update all devcontainer-template.json files
          find . -name "devcontainer-template.json" -type f | while read -r file; do
            echo "Updating template file: $file"
            jq --arg version "$VERSION" '.version = $version' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
          done
          
          # Find and update feature references in all devcontainer.json files to use major version
          find . -name "devcontainer.json" -type f | while read -r file; do
            echo "Checking feature references in: $file"
            # Check if file has features section and onezerocompany features
            if jq -e '.features // {} | keys[] | test("ghcr.io/onezerocompany/features/")' "$file" > /dev/null 2>&1; then
              echo "Updating feature references in: $file"
              jq --arg major "$VERSION_MAJOR" '
                if .features then
                  .features |= with_entries(
                    if .key | test("ghcr.io/onezerocompany/features/") then
                      .key = (.key | gsub(":.*$"; "") + ":" + $major)
                    else . end
                  )
                else . end
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            fi
          done

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish All Templates
        uses: devcontainers/action@v1
        with:
          publish-templates: "true"
          base-path-to-templates: "./templates"
          generate-docs: "true"
          disable-repo-tagging: true
          oci-registry: ghcr.io
          templates-namespace: onezerocompany/templates
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build base Docker image
  publish-base:
    name: Build and Push base Docker Image
    runs-on: ubuntu-latest
    needs: [extract-version]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/base
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=${{ needs.extract-version.outputs.version_major }}

      - name: Build and Push base
        uses: docker/build-push-action@v5
        with:
          context: ./images/base
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/base:buildcache
            type=registry,ref=ghcr.io/onezerocompany/base:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/base:buildcache,mode=max

  # Build runner Docker image
  publish-runner:
    name: Build and Push runner Docker Image
    runs-on: ubuntu-latest
    needs: [extract-version, publish-base]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/runner
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=${{ needs.extract-version.outputs.version_major }}

      - name: Build and Push runner
        uses: docker/build-push-action@v5
        with:
          context: ./images/runner
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/runner:buildcache
            type=registry,ref=ghcr.io/onezerocompany/runner:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/runner:buildcache,mode=max

  # Build settings-gen Docker image
  publish-settings-gen:
    name: Build and Push settings-gen Docker Image
    runs-on: ubuntu-latest
    needs: [extract-version]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/onezerocompany/settings-gen
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.extract-version.outputs.version }}
            type=raw,value=${{ needs.extract-version.outputs.version_major }}

      - name: Build and Push settings-gen
        uses: docker/build-push-action@v5
        with:
          context: ./images/settings-gen
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=registry,ref=ghcr.io/onezerocompany/settings-gen:buildcache
            type=registry,ref=ghcr.io/onezerocompany/settings-gen:latest
          cache-to: type=registry,ref=ghcr.io/onezerocompany/settings-gen:buildcache,mode=max

  # Pre-build dev container images
  prebuild:
    name: Pre-build Dev Container Images
    runs-on: ubuntu-latest
    needs: [extract-version, publish-base, publish-templates, publish-features]
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        template:
          - base
          - dind
          # Note: postgres-app excluded due to build issues (missing init-db.sql)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Wait for base images to be available
      - name: Wait for base image availability
        run: |
          echo "Waiting for base image to be available..."
          for i in {1..10}; do
            if docker pull ghcr.io/onezerocompany/base:latest; then
              echo "Base image is available"
              break
            fi
            echo "Attempt $i: Base image not ready, waiting..."
            sleep 30
          done

      - name: Pre-build ${{ matrix.template }} template
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/onezerocompany/devcontainer
          imageTag: ${{ matrix.template }}-${{ needs.extract-version.outputs.version }}
          cacheFrom: ghcr.io/onezerocompany/devcontainer:${{ matrix.template }}
          push: always
          platform: linux/amd64,linux/arm64
          subFolder: templates/${{ matrix.template }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag additional versions for ${{ matrix.template }}
        run: |
          # Tag with template name (latest for this template)
          docker buildx imagetools create \
            ghcr.io/onezerocompany/devcontainer:${{ matrix.template }}-${{ needs.extract-version.outputs.version }} \
            --tag ghcr.io/onezerocompany/devcontainer:${{ matrix.template }}

          # Tag with major version
          docker buildx imagetools create \
            ghcr.io/onezerocompany/devcontainer:${{ matrix.template }}-${{ needs.extract-version.outputs.version }} \
            --tag ghcr.io/onezerocompany/devcontainer:${{ matrix.template }}-${{ needs.extract-version.outputs.version_major }}
